import unittest

from writedown.ast import ChapterNode, DocumentNode
from writedown.parser import Parser, SequenceWarning

class TestSequencing(unittest.TestCase):
    def test_all_auto(self):
        doc = Parser().parse_doc("""@chapter One
@chapter Two""")

        self.assertIsInstance(doc, DocumentNode)
        self.assertEqual(len(doc.nodes), 2)

        ch1 = doc.nodes[0]
        self.assertIsInstance(ch1, ChapterNode)
        self.assertEqual(ch1.number, 1) # Autogenerated
        self.assertEqual(ch1.title, "One")

        ch2 = doc.nodes[1]
        self.assertIsInstance(ch2, ChapterNode)
        self.assertEqual(ch2.number, 2) # Autogenerated
        self.assertEqual(ch2.title, "Two")

    def test_manual_then_auto(self):
        doc = Parser().parse_doc("""@chapter 1 One
@chapter Two""")

        self.assertIsInstance(doc, DocumentNode)
        self.assertEqual(len(doc.nodes), 2)

        ch1 = doc.nodes[0]
        self.assertIsInstance(ch1, ChapterNode)
        self.assertEqual(ch1.number, 1) # Manual
        self.assertEqual(ch1.title, "One")

        ch2 = doc.nodes[1]
        self.assertIsInstance(ch2, ChapterNode)
        self.assertEqual(ch2.number, 2) # Autogenerated
        self.assertEqual(ch2.title, "Two")

    def test_auto_then_manual_good(self):
        doc = Parser().parse_doc("""@chapter One
@chapter 2 Two""")

        self.assertIsInstance(doc, DocumentNode)
        self.assertEqual(len(doc.nodes), 2)

        ch1 = doc.nodes[0]
        self.assertIsInstance(ch1, ChapterNode)
        self.assertEqual(ch1.number, 1) # Autogenerated
        self.assertEqual(ch1.title, "One")

        ch2 = doc.nodes[1]
        self.assertIsInstance(ch2, ChapterNode)
        self.assertEqual(ch2.number, 2) # Manual
        self.assertEqual(ch2.title, "Two")        

    def test_auto_then_manual_eq_bad(self):
        doc = Parser().parse_doc("""@chapter 1 One
@chapter 1 Two""")
        self.assertWarns(SequenceWarning)

    def test_auto_then_manual_lt_bad(self):
        doc = Parser().parse_doc("""@chapter One
@chapter 0 Two""")
        self.assertWarns(SequenceWarning)

    def test_auto_then_manual_gt_bad(self):
        doc = Parser().parse_doc("""@chapter One
@chapter 3 Two""")
        self.assertWarns(SequenceWarning)

    def test_manual_then_manual_eq_bad(self):
        doc = Parser().parse_doc("""@chapter 1 One
@chapter 1 Two""")
        self.assertWarns(SequenceWarning)

    def test_manual_then_manual_lt_bad(self):
        doc = Parser().parse_doc("""@chapter 1 One
@chapter 0 Two""")
        self.assertWarns(SequenceWarning)

    def test_manual_then_manual_gt_bad(self):
        doc = Parser().parse_doc("""@chapter 1 One
@chapter 3 Two""")
        self.assertWarns(SequenceWarning)

if __name__ == '__main__':
    unittest.main()